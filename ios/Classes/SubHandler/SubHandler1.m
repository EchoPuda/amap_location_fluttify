//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler1.h"
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapLocationFluttifyPlugin (SubHandler1)
- (NSDictionary<NSString*, Handler>*) getSubHandler1 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"AMapLocationReGeocode::set_country": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationReGeocode::set_country");
            }
        
            // args
            // jsonable arg
            NSString* country = (NSString*) args[@"country"];
        
            // ref
            AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.country = country;
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationReGeocode::set_province");
            }
        
            // args
            // jsonable arg
            NSString* province = (NSString*) args[@"province"];
        
            // ref
            AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.province = province;
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationReGeocode::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationReGeocode::set_district");
            }
        
            // args
            // jsonable arg
            NSString* district = (NSString*) args[@"district"];
        
            // ref
            AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.district = district;
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_township": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationReGeocode::set_township");
            }
        
            // args
            // jsonable arg
            NSString* township = (NSString*) args[@"township"];
        
            // ref
            AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.township = township;
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_neighborhood": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationReGeocode::set_neighborhood");
            }
        
            // args
            // jsonable arg
            NSString* neighborhood = (NSString*) args[@"neighborhood"];
        
            // ref
            AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.neighborhood = neighborhood;
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_building": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationReGeocode::set_building");
            }
        
            // args
            // jsonable arg
            NSString* building = (NSString*) args[@"building"];
        
            // ref
            AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.building = building;
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationReGeocode::set_citycode");
            }
        
            // args
            // jsonable arg
            NSString* citycode = (NSString*) args[@"citycode"];
        
            // ref
            AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.citycode = citycode;
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationReGeocode::set_adcode");
            }
        
            // args
            // jsonable arg
            NSString* adcode = (NSString*) args[@"adcode"];
        
            // ref
            AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.adcode = adcode;
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_street": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationReGeocode::set_street");
            }
        
            // args
            // jsonable arg
            NSString* street = (NSString*) args[@"street"];
        
            // ref
            AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.street = street;
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_number": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationReGeocode::set_number");
            }
        
            // args
            // jsonable arg
            NSString* number = (NSString*) args[@"number"];
        
            // ref
            AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.number = number;
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_POIName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationReGeocode::set_POIName");
            }
        
            // args
            // jsonable arg
            NSString* POIName = (NSString*) args[@"POIName"];
        
            // ref
            AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.POIName = POIName;
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_AOIName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationReGeocode::set_AOIName");
            }
        
            // args
            // jsonable arg
            NSString* AOIName = (NSString*) args[@"AOIName"];
        
            // ref
            AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.AOIName = AOIName;
            methodResult(@"success");
        },
        
        @"AMapLocationPoint::set_latitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationPoint::set_latitude");
            }
        
            // args
            // jsonable arg
            CGFloat latitude = [args[@"latitude"] floatValue];
        
            // ref
            AMapLocationPoint* ref = (AMapLocationPoint*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.latitude = latitude;
            methodResult(@"success");
        },
        
        @"AMapLocationPoint::set_longitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationPoint::set_longitude");
            }
        
            // args
            // jsonable arg
            CGFloat longitude = [args[@"longitude"] floatValue];
        
            // ref
            AMapLocationPoint* ref = (AMapLocationPoint*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.longitude = longitude;
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_pId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationPOIItem::set_pId");
            }
        
            // args
            // jsonable arg
            NSString* pId = (NSString*) args[@"pId"];
        
            // ref
            AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.pId = pId;
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationPOIItem::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationPOIItem::set_type");
            }
        
            // args
            // jsonable arg
            NSString* type = (NSString*) args[@"type"];
        
            // ref
            AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.type = type;
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_typeCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationPOIItem::set_typeCode");
            }
        
            // args
            // jsonable arg
            NSString* typeCode = (NSString*) args[@"typeCode"];
        
            // ref
            AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.typeCode = typeCode;
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationPOIItem::set_address");
            }
        
            // args
            // jsonable arg
            NSString* address = (NSString*) args[@"address"];
        
            // ref
            AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.address = address;
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationPOIItem::set_location");
            }
        
            // args
            // ref arg
            AMapLocationPoint* location = (AMapLocationPoint*) HEAP[args[@"location"]];
        
            // ref
            AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_tel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationPOIItem::set_tel");
            }
        
            // args
            // jsonable arg
            NSString* tel = (NSString*) args[@"tel"];
        
            // ref
            AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.tel = tel;
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationPOIItem::set_province");
            }
        
            // args
            // jsonable arg
            NSString* province = (NSString*) args[@"province"];
        
            // ref
            AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.province = province;
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationPOIItem::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationPOIItem::set_district");
            }
        
            // args
            // jsonable arg
            NSString* district = (NSString*) args[@"district"];
        
            // ref
            AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.district = district;
            methodResult(@"success");
        },
        
        @"AMapLocationDistrictItem::set_cityCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationDistrictItem::set_cityCode");
            }
        
            // args
            // jsonable arg
            NSString* cityCode = (NSString*) args[@"cityCode"];
        
            // ref
            AMapLocationDistrictItem* ref = (AMapLocationDistrictItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            ref.cityCode = cityCode;
            methodResult(@"success");
        },
        
        @"AMapGeoFenceManager::set_activeAction_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                AMapGeoFenceActiveAction activeAction = (AMapGeoFenceActiveAction) [args[@"activeAction"] integerValue];
        
                // ref
                AMapGeoFenceManager* ref = (AMapGeoFenceManager*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.activeAction = activeAction;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapGeoFenceManager::set_pausesLocationUpdatesAutomatically_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL pausesLocationUpdatesAutomatically = [args[@"pausesLocationUpdatesAutomatically"] boolValue];
        
                // ref
                AMapGeoFenceManager* ref = (AMapGeoFenceManager*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.pausesLocationUpdatesAutomatically = pausesLocationUpdatesAutomatically;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapGeoFenceManager::set_allowsBackgroundLocationUpdates_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL allowsBackgroundLocationUpdates = [args[@"allowsBackgroundLocationUpdates"] boolValue];
        
                // ref
                AMapGeoFenceManager* ref = (AMapGeoFenceManager*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.allowsBackgroundLocationUpdates = allowsBackgroundLocationUpdates;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapGeoFenceManager::set_detectRiskOfFakeLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL detectRiskOfFakeLocation = [args[@"detectRiskOfFakeLocation"] boolValue];
        
                // ref
                AMapGeoFenceManager* ref = (AMapGeoFenceManager*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.detectRiskOfFakeLocation = detectRiskOfFakeLocation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationRegion::set_notifyOnEntry_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL notifyOnEntry = [args[@"notifyOnEntry"] boolValue];
        
                // ref
                AMapLocationRegion* ref = (AMapLocationRegion*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.notifyOnEntry = notifyOnEntry;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationRegion::set_notifyOnExit_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL notifyOnExit = [args[@"notifyOnExit"] boolValue];
        
                // ref
                AMapLocationRegion* ref = (AMapLocationRegion*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.notifyOnExit = notifyOnExit;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapGeoFenceRegion::set_fenceStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                AMapGeoFenceRegionStatus fenceStatus = (AMapGeoFenceRegionStatus) [args[@"fenceStatus"] integerValue];
        
                // ref
                AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.fenceStatus = fenceStatus;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapGeoFenceRegion::set_regionType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                AMapGeoFenceRegionType regionType = (AMapGeoFenceRegionType) [args[@"regionType"] integerValue];
        
                // ref
                AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.regionType = regionType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapGeoFenceRegion::set_currentLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                CLLocation* currentLocation = (CLLocation*) HEAP[args[@"currentLocation"]];
        
                // ref
                AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.currentLocation = currentLocation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationManager::set_distanceFilter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CLLocationDistance distanceFilter = [args[@"distanceFilter"] doubleValue];
        
                // ref
                AMapLocationManager* ref = (AMapLocationManager*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.distanceFilter = distanceFilter;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationManager::set_desiredAccuracy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CLLocationAccuracy desiredAccuracy = [args[@"desiredAccuracy"] doubleValue];
        
                // ref
                AMapLocationManager* ref = (AMapLocationManager*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.desiredAccuracy = desiredAccuracy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationManager::set_pausesLocationUpdatesAutomatically_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL pausesLocationUpdatesAutomatically = [args[@"pausesLocationUpdatesAutomatically"] boolValue];
        
                // ref
                AMapLocationManager* ref = (AMapLocationManager*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.pausesLocationUpdatesAutomatically = pausesLocationUpdatesAutomatically;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationManager::set_allowsBackgroundLocationUpdates_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL allowsBackgroundLocationUpdates = [args[@"allowsBackgroundLocationUpdates"] boolValue];
        
                // ref
                AMapLocationManager* ref = (AMapLocationManager*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.allowsBackgroundLocationUpdates = allowsBackgroundLocationUpdates;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationManager::set_locationTimeout_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSInteger locationTimeout = [args[@"locationTimeout"] longValue];
        
                // ref
                AMapLocationManager* ref = (AMapLocationManager*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.locationTimeout = locationTimeout;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationManager::set_reGeocodeTimeout_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSInteger reGeocodeTimeout = [args[@"reGeocodeTimeout"] longValue];
        
                // ref
                AMapLocationManager* ref = (AMapLocationManager*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.reGeocodeTimeout = reGeocodeTimeout;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationManager::set_locatingWithReGeocode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL locatingWithReGeocode = [args[@"locatingWithReGeocode"] boolValue];
        
                // ref
                AMapLocationManager* ref = (AMapLocationManager*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.locatingWithReGeocode = locatingWithReGeocode;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationManager::set_reGeocodeLanguage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                AMapLocationReGeocodeLanguage reGeocodeLanguage = (AMapLocationReGeocodeLanguage) [args[@"reGeocodeLanguage"] integerValue];
        
                // ref
                AMapLocationManager* ref = (AMapLocationManager*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.reGeocodeLanguage = reGeocodeLanguage;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationManager::set_detectRiskOfFakeLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL detectRiskOfFakeLocation = [args[@"detectRiskOfFakeLocation"] boolValue];
        
                // ref
                AMapLocationManager* ref = (AMapLocationManager*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.detectRiskOfFakeLocation = detectRiskOfFakeLocation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_formattedAddress_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* formattedAddress = (NSString*) args[@"formattedAddress"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.formattedAddress = formattedAddress;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_country_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* country = (NSString*) args[@"country"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.country = country;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_province_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* province = (NSString*) args[@"province"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.province = province;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_city_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* city = (NSString*) args[@"city"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.city = city;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_district_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* district = (NSString*) args[@"district"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.district = district;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_township_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* township = (NSString*) args[@"township"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.township = township;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_neighborhood_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* neighborhood = (NSString*) args[@"neighborhood"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.neighborhood = neighborhood;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_building_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* building = (NSString*) args[@"building"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.building = building;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_citycode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* citycode = (NSString*) args[@"citycode"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.citycode = citycode;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_adcode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* adcode = (NSString*) args[@"adcode"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.adcode = adcode;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_street_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* street = (NSString*) args[@"street"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.street = street;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_number_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* number = (NSString*) args[@"number"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.number = number;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_POIName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* POIName = (NSString*) args[@"POIName"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.POIName = POIName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationReGeocode::set_AOIName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* AOIName = (NSString*) args[@"AOIName"];
        
                // ref
                AMapLocationReGeocode* ref = (AMapLocationReGeocode*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.AOIName = AOIName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationPoint::set_latitude_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat latitude = [args[@"latitude"] floatValue];
        
                // ref
                AMapLocationPoint* ref = (AMapLocationPoint*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.latitude = latitude;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationPoint::set_longitude_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat longitude = [args[@"longitude"] floatValue];
        
                // ref
                AMapLocationPoint* ref = (AMapLocationPoint*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.longitude = longitude;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_pId_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* pId = (NSString*) args[@"pId"];
        
                // ref
                AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.pId = pId;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_name_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
        
                // ref
                AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.name = name;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_type_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* type = (NSString*) args[@"type"];
        
                // ref
                AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.type = type;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_typeCode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* typeCode = (NSString*) args[@"typeCode"];
        
                // ref
                AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.typeCode = typeCode;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_address_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* address = (NSString*) args[@"address"];
        
                // ref
                AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.address = address;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_location_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                AMapLocationPoint* location = (AMapLocationPoint*) HEAP[args[@"location"]];
        
                // ref
                AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.location = location;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_tel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* tel = (NSString*) args[@"tel"];
        
                // ref
                AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.tel = tel;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_province_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* province = (NSString*) args[@"province"];
        
                // ref
                AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.province = province;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_city_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* city = (NSString*) args[@"city"];
        
                // ref
                AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.city = city;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationPOIItem::set_district_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* district = (NSString*) args[@"district"];
        
                // ref
                AMapLocationPOIItem* ref = (AMapLocationPOIItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.district = district;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapLocationDistrictItem::set_cityCode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* cityCode = (NSString*) args[@"cityCode"];
        
                // ref
                AMapLocationDistrictItem* ref = (AMapLocationDistrictItem*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
                ref.cityCode = cityCode;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"RefClass::isKindOfAMapGeoFenceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapGeoFenceManager class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapLocationRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapLocationRegion class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapLocationCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapLocationCircleRegion class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapLocationPolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapLocationPolygonRegion class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapGeoFenceRegion class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapGeoFenceCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapGeoFenceCircleRegion class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapGeoFencePolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapGeoFencePolygonRegion class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapGeoFencePOIRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapGeoFencePOIRegion class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapGeoFenceDistrictRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapGeoFenceDistrictRegion class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapLocationManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapLocationManager class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapLocationReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapLocationReGeocode class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapLocationPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapLocationPoint class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapLocationPOIItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapLocationPOIItem class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapLocationDistrictItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapLocationDistrictItem class]];
            methodResult(@(isTargetType));
        },
        
        @"ObjectFactory::createAMapGeoFenceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapGeoFenceManager");
            }
        
            AMapGeoFenceManager* ref = [[AMapGeoFenceManager alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapLocationRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapLocationRegion");
            }
        
            AMapLocationRegion* ref = [[AMapLocationRegion alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapLocationCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapLocationCircleRegion");
            }
        
            AMapLocationCircleRegion* ref = [[AMapLocationCircleRegion alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapLocationPolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapLocationPolygonRegion");
            }
        
            AMapLocationPolygonRegion* ref = [[AMapLocationPolygonRegion alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapGeoFenceRegion");
            }
        
            AMapGeoFenceRegion* ref = [[AMapGeoFenceRegion alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapGeoFenceCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapGeoFenceCircleRegion");
            }
        
            AMapGeoFenceCircleRegion* ref = [[AMapGeoFenceCircleRegion alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapGeoFencePolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapGeoFencePolygonRegion");
            }
        
            AMapGeoFencePolygonRegion* ref = [[AMapGeoFencePolygonRegion alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapGeoFencePOIRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapGeoFencePOIRegion");
            }
        
            AMapGeoFencePOIRegion* ref = [[AMapGeoFencePOIRegion alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapGeoFenceDistrictRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapGeoFenceDistrictRegion");
            }
        
            AMapGeoFenceDistrictRegion* ref = [[AMapGeoFenceDistrictRegion alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapLocationManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapLocationManager");
            }
        
            AMapLocationManager* ref = [[AMapLocationManager alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapLocationReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapLocationReGeocode");
            }
        
            AMapLocationReGeocode* ref = [[AMapLocationReGeocode alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapLocationPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapLocationPoint");
            }
        
            AMapLocationPoint* ref = [[AMapLocationPoint alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapLocationPOIItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapLocationPOIItem");
            }
        
            AMapLocationPOIItem* ref = [[AMapLocationPOIItem alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapLocationDistrictItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapLocationDistrictItem");
            }
        
            AMapLocationDistrictItem* ref = [[AMapLocationDistrictItem alloc] init];
        
            methodResult(ref);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapGeoFenceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapGeoFenceManager* ref = [[AMapGeoFenceManager alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapLocationRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapLocationRegion* ref = [[AMapLocationRegion alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapLocationCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapLocationCircleRegion* ref = [[AMapLocationCircleRegion alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapLocationPolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapLocationPolygonRegion* ref = [[AMapLocationPolygonRegion alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapGeoFenceRegion* ref = [[AMapGeoFenceRegion alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapGeoFenceCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapGeoFenceCircleRegion* ref = [[AMapGeoFenceCircleRegion alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapGeoFencePolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapGeoFencePolygonRegion* ref = [[AMapGeoFencePolygonRegion alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapGeoFencePOIRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapGeoFencePOIRegion* ref = [[AMapGeoFencePOIRegion alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapGeoFenceDistrictRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapGeoFenceDistrictRegion* ref = [[AMapGeoFenceDistrictRegion alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapLocationManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapLocationManager* ref = [[AMapLocationManager alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapLocationReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapLocationReGeocode* ref = [[AMapLocationReGeocode alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapLocationPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapLocationPoint* ref = [[AMapLocationPoint alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapLocationPOIItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapLocationPOIItem* ref = [[AMapLocationPOIItem alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapLocationDistrictItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapLocationDistrictItem* ref = [[AMapLocationDistrictItem alloc] init];
                [resultList addObject:ref];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"AMapLocationCoordinateConvert::AMapLocationCoordinateConvert": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[args[@"coordinate"]];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // enum arg
            AMapLocationCoordinateType type = (AMapLocationCoordinateType) [args[@"type"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapLocationCoordinateConvert::AMapLocationCoordinateConvert(%@, %@)", args[@"coordinate"], args[@"type"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = AMapLocationCoordinateConvert(coordinate, type);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"AMapLocationDataAvailableForCoordinate::AMapLocationDataAvailableForCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[args[@"coordinate"]];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapLocationDataAvailableForCoordinate::AMapLocationDataAvailableForCoordinate(%@)", args[@"coordinate"]);
            }
        
            // invoke native method
            BOOL result = AMapLocationDataAvailableForCoordinate(coordinate);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
    };
}

@end
